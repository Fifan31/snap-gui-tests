<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.0.4">
  <include>qfs.qft</include>
  <include>variables.qft</include>
  <include>shared_lib.qft</include>
  <dependency>../s3tbx/lib/s3tbx_main.qft</dependency>
  <dependency>../snap/lib/snap_main.qft</dependency>
  <PackageRoot id="_3">
    <comment>s3tbx</comment>
    <Package id="_1oIW" name="gpt">
      <Procedure id="_1oOx" name="run_operator_check_output_file">
        <variable name="application"/>
        <IfSequence id="_1p2V" postdelay="2000"
                    test="&#34;$(supported_format)&#34;==&#34;true&#34;">
          <TestStep id="_1p1t" name="set_variables">
            <ProcedureCall id="_1p1u"
                           procedure="variables.variable_increase_on_1">
              <variable name="var_int">$(sleep_time)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1p1v" procedure="utils.gpt_calling"/>
            <ProcedureCall id="_1p1w" procedure="path.main_path"/>
            <TestStep id="_1p1x" name="set_iput">
              <IfSequence id="_1p1y"
                          test="&#34;$(dataInDir)&#34;&lt;&gt;&#34;&#34;">
                <ProcedureCall id="_1p1z"
                               procedure="path.source_data_directory">
                  <variable name="data_type">$(dataInDir)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1p1+" local="true" varname="i1">
                  <default>$(sourceOption)$(data_source_directory)$(fileName)</default>
                </SetGlobalStep>
                <ElseSequence id="_1p1-">
                  <SetGlobalStep id="_1p20" local="true" varname="i1"/>
                </ElseSequence>
              </IfSequence>
              <IfSequence id="_1p21"
                          test="&#34;$(dataInDir2)&#34;&lt;&gt;&#34;&#34;">
                <ProcedureCall id="_1p22"
                               procedure="path.source_data_directory">
                  <variable name="data_type">$(dataInDir2)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1p23" local="true" varname="i2">
                  <default>$(sourceOption2)$(data_source_directory)$(fileName2)</default>
                </SetGlobalStep>
                <ElseSequence id="_1p24">
                  <SetGlobalStep id="_1p25" local="true" varname="i2"/>
                </ElseSequence>
              </IfSequence>
              <IfSequence id="_1p26"
                          test="&#34;$(dataInDir3)&#34;&lt;&gt;&#34;&#34;">
                <ProcedureCall id="_1p27"
                               procedure="path.source_data_directory">
                  <variable name="data_type">$(dataInDir3)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1p28" local="true" varname="i3">
                  <default>$(sourceOption3)$(data_source_directory)$(fileName3)</default>
                </SetGlobalStep>
                <ElseSequence id="_1p29">
                  <SetGlobalStep id="_1p2A" local="true" varname="i3"/>
                </ElseSequence>
              </IfSequence>
              <SetGlobalStep id="_1p2B" varname="input">
                <default>$(i1) $(i2) $(i3)</default>
              </SetGlobalStep>
              <ServerScriptStep disabled="true" id="_1p2C" name="print">
                <code>print "*** gpt_input = $(input)"  </code>
              </ServerScriptStep>
            </TestStep>
            <TestStep id="_1p2D"
                      name="set_graph_file_or_operator_and_parameters_file">
              <ProcedureCall id="_1p2E"
                             procedure="path.output_data_directory">
                <variable name="output_dir">$(output_folder)</variable>
              </ProcedureCall>
              <IfSequence id="_1p2F"
                          test="&#34;$(parameters_file)&#34;&lt;&gt;&#34;&#34;">
                <ProcedureCall id="_1p2G" procedure="path.param_file_dir"/>
                <SetGlobalStep id="_1p2H" varname="new_param">
                  <default>$(gpf_op) -p $(param_file_dir)$(parameters_file) $(param)</default>
                </SetGlobalStep>
                <IfSequence id="_1p2I"
                            test="&#34;$(gpf_op)&#34;==&#34;Binning&#34;">
                  <SetGlobalStep id="_1p2J" varname="outfn">
                    <default>$(parameters_file)</default>
                  </SetGlobalStep>
                  <ElseSequence id="_1p2K">
                    <SetGlobalStep id="_1p2L" varname="outfn">
                      <default>$(wv)_use_parameters_file</default>
                    </SetGlobalStep>
                  </ElseSequence>
                </IfSequence>
                <ElseifSequence id="_1p2M"
                                test="&#34;$(xml_file)&#34;&lt;&gt;&#34;&#34;">
                  <ProcedureCall id="_1p2N" procedure="path.graph_file_dir">
                    <variable name="xml_dir">$(xml_file_dir)</variable>
                  </ProcedureCall>
                  <SetGlobalStep id="_1p2O" varname="new_param">
                    <default>$(graph_file_dir)$(xml_file).xml $(param)</default>
                  </SetGlobalStep>
                  <IfSequence id="_1p2P"
                              test="&#34;$(gpf_op)&#34;==&#34;Binning&#34;">
                    <SetGlobalStep id="_1p2Q" varname="outfn">
                      <default>$(xml_file)</default>
                    </SetGlobalStep>
                    <ElseSequence id="_1p2R">
                      <SetGlobalStep id="_1p2S" varname="outfn">
                        <default>$(wv)_$(xml_file)</default>
                      </SetGlobalStep>
                    </ElseSequence>
                  </IfSequence>
                </ElseifSequence>
              </IfSequence>
            </TestStep>
            <ProcedureCall id="_1p2T" procedure="utils.gpt_client_name">
              <variable name="client_nr">$(wv)</variable>
            </ProcedureCall>
            <ServerScriptStep id="_1p2U" name="print">
              <code>print "************ graph or parameters file = $(new_param)*****************"  </code>
            </ServerScriptStep>
          </TestStep>
          <TestStep id="_1p2W" name="set_working_directory">
            <IfSequence id="_1p2X"
                        test="&#34;$(application)&#34;==&#34;s3tbx&#34;">
              <SetGlobalStep id="_1p2Y" local="true" varname="folder">
                <default>${path:s3tbx_bin_directory}</default>
              </SetGlobalStep>
              <ElseifSequence id="_1p2Z"
                              test="&#34;$(application)&#34;==&#34;snap&#34;">
                <SetGlobalStep id="_1p2a" local="true" varname="folder">
                  <default>${path:snap_bin_directory}</default>
                </SetGlobalStep>
              </ElseifSequence>
            </IfSequence>
          </TestStep>
          <TestStep id="_1p2b" name="compose_command_line ">
            <comment>@teststep Set Command Line</comment>
            <IfSequence id="_1p2c" test="${qftest:windows}">
              <SetGlobalStep id="_1p2d" varname="gpt_commando">
                <default>$(gpt_calling) $(new_param) $(of) -t $(output_data_directory)$(outfn).$(fr) $(input)</default>
              </SetGlobalStep>
              <ElseSequence id="_1p2e">
                <SetGlobalStep id="_1p2f" varname="gpt_commando">
                  <default>$(folder)/$(gpt_calling) $(new_param) $(of) -t $(output_data_directory)$(outfn).$(fr) $(input)</default>
                </SetGlobalStep>
              </ElseSequence>
            </IfSequence>
          </TestStep>
          <TestStep id="_1p2g" name="run_operator">
            <comment>$(gpt_commando)</comment>
            <TryStep id="_1p2h">
              <ShellClientStarter client="$(gpt_client_name)"
                                  command="$(gpt_commando)"
                                  directory="$(folder)" id="_1p2i"
                                  postdelay="20000"/>
              <CatchSequence exception="TestException" id="_1p2j"
                             maxerror="0">
                <SetGlobalStep id="_1p2k" varname="gpt_client_name">
                  <default>$(gpt_client_name)_a</default>
                </SetGlobalStep>
                <ShellClientStarter client="$(gpt_client_name)"
                                    command="$(gpt_commando)"
                                    directory="$(folder)" id="_1p2l"
                                    postdelay="20000"/>
              </CatchSequence>
            </TryStep>
            <ServerScriptStep id="_1p2m" name="print">
              <code>print "$(gpt_commando)"  </code>
            </ServerScriptStep>
            <ProcedureCall id="_1p2n" postdelay="1000"
                           procedure="run-log.log_client_output">
              <variable name="client_name">$(gpt_client_name)</variable>
            </ProcedureCall>
            <ServerScriptStep id="_1p2o" name="print">
              <code>print "*** gpt_client_name = $(gpt_client_name)"  </code>
            </ServerScriptStep>
          </TestStep>
          <ProcedureCall id="_1p2p"
                         procedure="utils.waiting_for_processierung_else_terminate_process">
            <variable name="client_name">$(gpt_client_name)</variable>
          </ProcedureCall>
          <ServerScriptStep disabled="true" id="_1p2q" name="print">
            <code>print "*** gpt_client_nr = $(wv)"  </code>
          </ServerScriptStep>
          <TestStep id="_1oPY" name="check_output">
            <TestStep id="_1oPZ" name="set_output_file">
              <IfSequence id="_1oPa" test="${qftest:windows}">
                <SetGlobalStep id="_1oPb" varname="outfile">
                  <default>${path:data_directory}out\\$(output_folder)\\$(outfn).$(fr)</default>
                </SetGlobalStep>
                <ElseifSequence id="_1oPc" name="MAC?"
                                test="'${system:os.name}' .find('Mac OS X')&gt;=0">
                  <SetGlobalStep id="_1oPd" varname="outfile">
                    <default>${path:data_directory}out/$(data_out_dir)/$(outfn).$(fr)</default>
                  </SetGlobalStep>
                </ElseifSequence>
                <ElseSequence id="_1oPe">
                  <SetGlobalStep id="_1oPf" varname="outfile">
                    <default>${path:data_directory}out/$(data_out_dir)/$(outfn).$(fr)</default>
                  </SetGlobalStep>
                </ElseSequence>
              </IfSequence>
            </TestStep>
            <ProcedureCall id="_1oPg"
                           procedure="check_external_file.file_exists_setGlobal">
              <variable name="fileName">$(outfile)</variable>
            </ProcedureCall>
            <IfSequence id="_1oPh"
                        test="&#34;$(fileExists)&#34;==&#34;False&#34;">
              <TestStep id="_1oPi" name="wait" postdelay="5000">
                <ProcedureCall id="_1oQb"
                               procedure="utils.waiting_for_processierung_else_terminate_process">
                  <variable name="client_name">$(gpt_client_name)</variable>
                </ProcedureCall>
              </TestStep>
              <ProcedureCall id="_1oPk"
                             procedure="check_external_file.file_exists_setGlobal">
                <variable name="fileName">$(outfile)</variable>
              </ProcedureCall>
              <IfSequence id="_1o-+"
                          test="&#34;$(fileExists)&#34;==&#34;False&#34;">
                <ProcedureCall id="_1p02" procedure="run-log.logError">
                  <variable name="message">$(outfile) is not processed</variable>
                  <variable name="withScreenshots">false</variable>
                </ProcedureCall>
              </IfSequence>
            </IfSequence>
          </TestStep>
          <ServerScriptStep disabled="true" id="_1o+J" name="print">
            <code>print "of = $(of)"</code>
          </ServerScriptStep>
        </IfSequence>
      </Procedure>
      <Procedure id="_1qR8" name="run_pconvert_check_output_file">
        <variable name="application"/>
        <IfSequence id="_1qTq" postdelay="2000"
                    test="&#34;$(supported_format)&#34;==&#34;true&#34;">
          <TestStep id="_1qR9" name="set_variables">
            <ProcedureCall id="_1qRA"
                           procedure="variables.variable_increase_on_1">
              <variable name="var_int">$(sleep_time)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qST" procedure="utils.pconvert_calling"/>
            <ProcedureCall id="_1qRC" procedure="path.main_path"/>
            <TestStep id="_1qRD" name="set_iput">
              <IfSequence id="_1qRE"
                          test="&#34;$(dataInDir)&#34;&lt;&gt;&#34;&#34;">
                <ProcedureCall id="_1qRF"
                               procedure="path.source_data_directory">
                  <variable name="data_type">$(dataInDir)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1qRG" varname="input">
                  <default>$(data_source_directory)$(fileName)</default>
                </SetGlobalStep>
              </IfSequence>
            </TestStep>
            <ProcedureCall id="_1qRl" procedure="utils.gpt_client_name">
              <variable name="client_nr">$(wv)</variable>
            </ProcedureCall>
            <TestStep id="_1qRo" name="set_working_directory">
              <IfSequence id="_1qRp"
                          test="&#34;$(application)&#34;==&#34;s3tbx&#34;">
                <SetGlobalStep id="_1qRq" local="true" varname="folder">
                  <default>${path:s3tbx_bin_directory}</default>
                </SetGlobalStep>
                <ElseifSequence id="_1qRr"
                                test="&#34;$(application)&#34;==&#34;snap&#34;">
                  <SetGlobalStep id="_1qRs" local="true" varname="folder">
                    <default>${path:snap_bin_directory}</default>
                  </SetGlobalStep>
                </ElseifSequence>
              </IfSequence>
            </TestStep>
            <ProcedureCall id="_1qSb" procedure="path.output_data_directory">
              <variable name="output_dir">$(output_folder)</variable>
            </ProcedureCall>
            <TestStep id="_1qSc" name="compose_command_line ">
              <comment>@teststep Set Command Line</comment>
              <SetGlobalStep id="_1qSd" varname="pconvert_commando">
                <default>$(pconvert_calling) $(of) -o $(output_data_directory) $(input)</default>
              </SetGlobalStep>
              <IfSequence id="_1qSe" test="${qftest:windows}">
                <ElseSequence id="_1qSf"/>
              </IfSequence>
            </TestStep>
          </TestStep>
          <TestStep id="_1qRy" name="run_operator">
            <comment>$(gpt_commando)</comment>
            <ServerScriptStep id="_1qUZ" name="print">
              <code>print "----- pconvert_commando = $(pconvert_commando)------"</code>
            </ServerScriptStep>
            <TryStep id="_1qRz">
              <ShellClientStarter client="$(gpt_client_name)"
                                  command="$(pconvert_commando)"
                                  directory="$(folder)" id="_1qR+"
                                  postdelay="20000"/>
              <CatchSequence exception="TestException" id="_1qR-"
                             maxerror="0">
                <SetGlobalStep id="_1qS0" varname="gpt_client_name">
                  <default>$(gpt_client_name)_a</default>
                </SetGlobalStep>
                <ShellClientStarter client="$(gpt_client_name)"
                                    command="$(pconvert_commando)"
                                    directory="$(folder)" id="_1qSa"
                                    postdelay="20000"/>
              </CatchSequence>
            </TryStep>
            <ProcedureCall id="_1qS3" postdelay="1000"
                           procedure="run-log.log_client_output">
              <variable name="client_name">$(gpt_client_name)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qS5"
                           procedure="utils.waiting_for_processierung_else_terminate_process">
              <variable name="client_name">$(gpt_client_name)</variable>
            </ProcedureCall>
          </TestStep>
          <TestStep id="_1qS7" name="check_output">
            <ServerScriptStep id="_1qUb" name="print">
              <code>print "----- output file = $(outfile)------"</code>
            </ServerScriptStep>
            <ProcedureCall id="_1qSF"
                           procedure="check_external_file.file_exists_setGlobal">
              <variable name="fileName">$(outfile)</variable>
            </ProcedureCall>
            <IfSequence id="_1qSG"
                        test="&#34;$(fileExists)&#34;==&#34;False&#34;">
              <TestStep id="_1qSH" name="wait" postdelay="5000">
                <ProcedureCall id="_1qSI"
                               procedure="utils.waiting_for_processierung_else_terminate_process">
                  <variable name="client_name">$(gpt_client_name)</variable>
                </ProcedureCall>
              </TestStep>
              <ProcedureCall id="_1qSJ"
                             procedure="check_external_file.file_exists_setGlobal">
                <variable name="fileName">$(outfile)</variable>
              </ProcedureCall>
              <IfSequence id="_1qSK"
                          test="&#34;$(fileExists)&#34;==&#34;False&#34;">
                <ProcedureCall id="_1qSL" procedure="run-log.logError">
                  <variable name="message">$(outfile) is not processed</variable>
                  <variable name="withScreenshots">false</variable>
                </ProcedureCall>
              </IfSequence>
            </IfSequence>
          </TestStep>
        </IfSequence>
        <ServerScriptStep disabled="true" id="_1qSM" name="print">
          <code>print "of = $(of)"</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1p36" name="run_operator_no_output_option">
        <variable name="application"/>
        <TestStep id="_1p37" name="set_variables">
          <ProcedureCall id="_1p38"
                         procedure="variables.variable_increase_on_1">
            <variable name="var_int">$(sleep_time)</variable>
          </ProcedureCall>
          <ProcedureCall id="_1p39" procedure="utils.gpt_calling"/>
          <ProcedureCall id="_1p3A" procedure="path.main_path"/>
          <TestStep id="_1p3B" name="set_iput">
            <IfSequence id="_1p3C"
                        test="&#34;$(dataInDir)&#34;&lt;&gt;&#34;&#34;">
              <ProcedureCall id="_1p3D"
                             procedure="path.source_data_directory">
                <variable name="data_type">$(dataInDir)</variable>
              </ProcedureCall>
              <SetGlobalStep id="_1p3E" local="true" varname="i1">
                <default>$(sourceOption)$(data_source_directory)$(fileName)</default>
              </SetGlobalStep>
              <ElseSequence id="_1p3F">
                <SetGlobalStep id="_1p3G" local="true" varname="i1"/>
              </ElseSequence>
            </IfSequence>
            <IfSequence id="_1p3H"
                        test="&#34;$(dataInDir2)&#34;&lt;&gt;&#34;&#34;">
              <ProcedureCall id="_1p3I"
                             procedure="path.source_data_directory">
                <variable name="data_type">$(dataInDir2)</variable>
              </ProcedureCall>
              <SetGlobalStep id="_1p3J" local="true" varname="i2">
                <default>$(sourceOption2)$(data_source_directory)$(fileName2)</default>
              </SetGlobalStep>
              <ElseSequence id="_1p3K">
                <SetGlobalStep id="_1p3L" local="true" varname="i2"/>
              </ElseSequence>
            </IfSequence>
            <IfSequence id="_1p3M"
                        test="&#34;$(dataInDir3)&#34;&lt;&gt;&#34;&#34;">
              <ProcedureCall id="_1p3N"
                             procedure="path.source_data_directory">
                <variable name="data_type">$(dataInDir3)</variable>
              </ProcedureCall>
              <SetGlobalStep id="_1p3O" local="true" varname="i3">
                <default>$(sourceOption3)$(data_source_directory)$(fileName3)</default>
              </SetGlobalStep>
              <ElseSequence id="_1p3P">
                <SetGlobalStep id="_1p3Q" local="true" varname="i3"/>
              </ElseSequence>
            </IfSequence>
            <SetGlobalStep id="_1p3R" varname="input">
              <default>$(i1) $(i2) $(i3)</default>
            </SetGlobalStep>
            <ServerScriptStep id="_1p3S" name="print">
              <code>print "*** gpt_input = $(input)"  </code>
            </ServerScriptStep>
          </TestStep>
          <TestStep id="_1p3T"
                    name="set_graph_file_or_operator_and_parameters_file">
            <ProcedureCall disabled="true" id="_1p3U"
                           procedure="path.output_data_directory">
              <variable name="output_dir">$(output_folder)</variable>
            </ProcedureCall>
            <IfSequence id="_1p3V"
                        test="&#34;$(parameters_file)&#34;&lt;&gt;&#34;&#34;">
              <ProcedureCall id="_1p3W" procedure="path.param_file_dir"/>
              <SetGlobalStep id="_1p3X" varname="new_param">
                <default>$(gpf_op) -p $(param_file_dir)$(parameters_file) $(param)</default>
              </SetGlobalStep>
              <ElseifSequence id="_1p3c"
                              test="&#34;$(xml_file)&#34;&lt;&gt;&#34;&#34;">
                <ProcedureCall id="_1p3d" procedure="path.graph_file_dir">
                  <variable name="xml_dir">$(xml_file_dir)</variable>
                </ProcedureCall>
                <SetGlobalStep id="_1p3e" varname="new_param">
                  <default>$(graph_file_dir)$(xml_file).xml $(param)</default>
                </SetGlobalStep>
              </ElseifSequence>
            </IfSequence>
          </TestStep>
          <ProcedureCall id="_1p3j" procedure="utils.gpt_client_name">
            <variable name="client_nr">$(wv)</variable>
          </ProcedureCall>
          <ServerScriptStep id="_1p3k" name="print">
            <code>print "************ graph or parameters file = $(new_param)*****************"  </code>
          </ServerScriptStep>
        </TestStep>
        <TestStep id="_1p3m" name="set_working_directory">
          <IfSequence id="_1p3n"
                      test="&#34;$(application)&#34;==&#34;s3tbx&#34;">
            <SetGlobalStep id="_1p3o" local="true" varname="folder">
              <default>${path:s3tbx_bin_directory}</default>
            </SetGlobalStep>
            <ElseifSequence id="_1p3p"
                            test="&#34;$(application)&#34;==&#34;snap&#34;">
              <SetGlobalStep id="_1p3q" local="true" varname="folder">
                <default>${path:snap_bin_directory}</default>
              </SetGlobalStep>
            </ElseifSequence>
          </IfSequence>
        </TestStep>
        <TestStep id="_1p3r" name="compose_command_line ">
          <comment>@teststep Set Command Line</comment>
          <IfSequence id="_1p3s" test="${qftest:windows}">
            <SetGlobalStep id="_1p3t" varname="gpt_commando">
              <default>$(gpt_calling) $(new_param) $(input)</default>
            </SetGlobalStep>
            <ElseSequence id="_1p3u">
              <SetGlobalStep id="_1p3v" varname="gpt_commando">
                <default>$(folder)/$(gpt_calling) $(new_param) $(input)</default>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
          <ServerScriptStep disabled="true" id="_1p45" name="print">
            <code>print "************ gpt_commando = $(gpt_commando)*****************"  </code>
          </ServerScriptStep>
        </TestStep>
        <TestStep id="_1p3w" name="run_operator">
          <comment>$(gpt_commando)</comment>
          <TryStep id="_1p3x">
            <ShellClientStarter client="$(gpt_client_name)"
                                command="$(gpt_commando)"
                                directory="$(folder)" id="_1p3y"
                                postdelay="20000"/>
            <CatchSequence exception="TestException" id="_1p3z" maxerror="0">
              <SetGlobalStep id="_1p3+" varname="gpt_client_name">
                <default>$(gpt_client_name)_a</default>
              </SetGlobalStep>
              <ShellClientStarter client="$(gpt_client_name)"
                                  command="$(gpt_commando)"
                                  directory="$(folder)" id="_1p3-"
                                  postdelay="20000"/>
            </CatchSequence>
          </TryStep>
          <ServerScriptStep disabled="true" id="_1p40" name="print">
            <code>print "$(gpt_commando)"  </code>
          </ServerScriptStep>
          <ProcedureCall id="_1p41" postdelay="1000"
                         procedure="run-log.log_client_output">
            <variable name="client_name">$(gpt_client_name)</variable>
          </ProcedureCall>
          <ServerScriptStep disabled="true" id="_1p42" name="print">
            <code>print "*** gpt_client_name = $(gpt_client_name)"  </code>
          </ServerScriptStep>
        </TestStep>
        <ProcedureCall id="_1p43"
                       procedure="utils.waiting_for_processierung_else_terminate_process">
          <variable name="client_name">$(gpt_client_name)</variable>
        </ProcedureCall>
        <ServerScriptStep disabled="true" id="_1p44" name="print">
          <code>print "*** gpt_client_nr = $(wv)"  </code>
        </ServerScriptStep>
      </Procedure>
    </Package>
    <Package id="_1l8Q" name="preparation">
      <Procedure id="_A43" name="pixEx_output_file_names">
        <ProcedureCall id="_1qPk" procedure="path.main_path"/>
        <IfSequence id="_1qPl" test="${qftest:windows}">
          <SetGlobalStep id="_1qPm" varname="out_dir">
            <default>${path:data_directory}out\\$(output_folder)\\$(xml_file)\\</default>
          </SetGlobalStep>
          <ElseifSequence id="_1qPn" name="MAC?"
                          test="'${system:os.name}' .find('Mac OS X')&gt;=0">
            <SetGlobalStep id="_1qPo" varname="out_dir">
              <default>${path:data_directory}out/$(data_out_dir)/$(xml_file)/</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_1qPp">
            <SetGlobalStep id="_1qPq" varname="out_dir">
              <default>${path:data_directory}out/$(data_out_dir)/$(xml_file)/</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <SetGlobalStep id="_1qPr" varname="map_file">
          <default>$(out_dir)$(xml_file)_productIdMap.txt</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qPs" varname="kmz_file">
          <default>$(out_dir)$(xml_file)_coordinates.kmz</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qQ1" varname="subScenes_dir">
          <default>$(out_dir)subScenes</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qPz" varname="measurements_1">
          <default>$(out_dir)$(xml_file)_$(prod_1)_measurements.txt</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qQ2" varname="measurements_2">
          <default>$(out_dir)$(xml_file)_$(prod_2)_measurements.txt</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qQ3" varname="measurements_3">
          <default>$(out_dir)$(xml_file)_$(prod_3)_measurements.txt</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qP+" varname="scatte_plot_file">
          <default>$(out_dir)$(xml_file)*.png</default>
        </SetGlobalStep>
      </Procedure>
      <Procedure id="_1p4e" name="statistics_output_file_names">
        <ProcedureCall id="_1qPj" procedure="path.main_path"/>
        <IfSequence id="_1qPT" test="${qftest:windows}">
          <SetGlobalStep id="_1qPU" varname="outfile">
            <default>${path:data_directory}out\\$(output_folder)\\$(xml_file)</default>
          </SetGlobalStep>
          <ElseifSequence id="_1qPV" name="MAC?"
                          test="'${system:os.name}' .find('Mac OS X')&gt;=0">
            <SetGlobalStep id="_1qPW" varname="outfile">
              <default>${path:data_directory}out/$(data_out_dir)/$(xml_file)</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_1qPX">
            <SetGlobalStep id="_1qPY" varname="outfile">
              <default>${path:data_directory}out/$(data_out_dir)/$(xml_file)</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <SetGlobalStep id="_1qPZ" varname="mapping_file">
          <default>$(outfile)_band_mapping.txt</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qPa" varname="meta_file">
          <default>$(outfile)_metadata.txt</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qPb" varname="shp_file">
          <default>$(outfile).shp</default>
        </SetGlobalStep>
        <SetGlobalStep id="_1qPc" varname="ascii">
          <default>$(outfile)</default>
        </SetGlobalStep>
      </Procedure>
      <Procedure id="_1oHp" name="environment_for_gpt_test">
        <variable name="out_dir"/>
        <ServerScriptStep disabled="true" id="_1kyA" name="clearGlobals">
          <code>rc.clearGlobals()</code>
        </ServerScriptStep>
        <SetGlobalStep id="_1oND" varname="client_nr">
          <default>0</default>
        </SetGlobalStep>
        <ProcedureCall id="_1oOT" procedure="path.output_data_directory">
          <variable name="output_dir">$(out_dir)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1o-q" procedure="cleanup.output_data_folder">
          <variable name="directory">$(out_dir)</variable>
        </ProcedureCall>
        <TryStep disabled="true" id="_1oN7" name="remove_directory">
          <ProcedureCall id="_1oQq"
                         procedure="qfs.shellutils.removeDirectory">
            <variable name="directory">$(output_data_directory)</variable>
          </ProcedureCall>
          <CatchSequence exception="TestException" id="_1oN8" maxerror="0"/>
        </TryStep>
        <TryStep disabled="true" id="_1oN5" name="mkdir">
          <ProcedureCall id="_1o+Y" procedure="shellutils.mkdir">
            <variable name="directory">$(output_data_directory)</variable>
          </ProcedureCall>
          <CatchSequence exception="TestException" id="_1oN6" maxerror="0"/>
        </TryStep>
      </Procedure>
    </Package>
    <Package id="_1oQd" name="tables">
      <Procedure id="_1p1d" name="aatsr_sst">
        <ExcelDataBinder excelfile="tables/gpt/sst.xls" id="_1p1e"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1oQe" name="band_maths">
        <ExcelDataBinder excelfile="tables/gpt/bandMaths.xls" id="_9V6"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p0g" name="binning">
        <ExcelDataBinder excelfile="tables/gpt/binning.xls" id="_1p0h"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1Z" name="cloud_probability">
        <ExcelDataBinder excelfile="tables/gpt/cloud_prob.xls" id="_1p1a"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1oQf" name="collocation">
        <ExcelDataBinder excelfile="tables/gpt/collocation.xls" id="_1oQg"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1j" name="em_claster_analysis">
        <ExcelDataBinder excelfile="tables/gpt/image_analysis.xls" id="_1p1k"
                         name="dataTable" sheetname="em_cluster_analysis"/>
      </Procedure>
      <Procedure id="_1p1S" name="flhmci">
        <ExcelDataBinder excelfile="tables/gpt/flh_mci.xls" id="_1p1T"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1l" name="km_cluster_analysis">
        <ExcelDataBinder excelfile="tables/gpt/image_analysis.xls" id="_1p1m"
                         name="dataTable" sheetname="km_cluster_analysis"/>
      </Procedure>
      <Procedure id="_1p1X" name="merge">
        <ExcelDataBinder excelfile="tables/gpt/merge.xls" id="_1p1Y"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1Q" name="meris_correct_radiometry">
        <ExcelDataBinder excelfile="tables/gpt/meris_correctRadiometry.xls"
                         id="_1p1R" name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1f" name="mosaic">
        <ExcelDataBinder excelfile="tables/gpt/mosaic.xls" id="_1p1g"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1V" name="ndvi">
        <ExcelDataBinder excelfile="tables/gpt/ndvi.xls" id="_1p1W"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1b" name="pca">
        <ExcelDataBinder excelfile="tables/gpt/pca.xls" id="_1p1c"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p4c" name="pixEx">
        <ExcelDataBinder excelfile="tables/gpt/pixEx.xls" id="_1p4d"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1qR6" name="percentile">
        <ExcelDataBinder excelfile="tables/gpt/percentile.xls" id="_1qR7"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1O" name="reproject">
        <ExcelDataBinder excelfile="tables/gpt/reprojection.xls" id="_1p1P"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1o" name="smac">
        <ExcelDataBinder excelfile="tables/gpt/smac.xls" id="_1p1p"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1q" name="statistics">
        <ExcelDataBinder excelfile="tables/gpt/statistics.xls" id="_1p1r"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1M" name="subset">
        <ExcelDataBinder excelfile="tables/gpt/subset.xls" id="_1p1N"
                         name="dataTable" sheetname="requests"/>
      </Procedure>
      <Procedure id="_1p1h" name="unmix">
        <ExcelDataBinder excelfile="tables/gpt/image_analysis.xls" id="_1p1n"
                         name="dataTable" sheetname="unmix"/>
      </Procedure>
    </Package>
    <Package id="_1lAZ" name="utils">
      <Procedure id="_1qUO" name="set_output_pconvert_file">
        <comment>@teststep set output file name.</comment>
        <ServerScriptStep id="_1qUP" name="substring">
          <code>import string 
pn = "$(fileName)"
#pn = "MER_RR__1_test.N1"
index = string.find(pn, ".")
rc.setGlobal("outfn", pn[:index])   
              </code>
        </ServerScriptStep>
        <ServerScriptStep id="_1qUQ" name="print">
          <code>print "***********  outf = $(outfn) ***************"</code>
        </ServerScriptStep>
        <IfSequence id="_1qUR" test="${qftest:windows}">
          <SetGlobalStep id="_1qUS" varname="output_pconvert_file">
            <default>${path:data_directory}out\\$(output_folder)\\$(outfn)</default>
          </SetGlobalStep>
          <ElseifSequence id="_1qUT" name="MAC?"
                          test="'${system:os.name}' .find('Mac OS X')&gt;=0">
            <SetGlobalStep id="_1qUU" varname="output_pconvert_file">
              <default>${path:data_directory}out/$(data_out_dir)/$(outfn)</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_1qUV">
            <SetGlobalStep id="_1qUW" varname="output_pconvert_file">
              <default>${path:data_directory}out/$(data_out_dir)/$(outfn)</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
        <ServerScriptStep id="_1qUc" name="print">
          <code>print "***********  output_pconvert_file = $(output_pconvert_file) ***************"</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1o+A" name="gpt_client_name">
        <variable name="client_nr"/>
        <SetGlobalStep id="_1o+B" varname="gpt_client_name">
          <default>gpt$(client_nr)</default>
        </SetGlobalStep>
        <ServerScriptStep id="_1o+C" name="set_variable_increase_on_1">
          <code>vl = $(client_nr)
vl = vl + 1   
rc.setGlobal("cn", vl)                       </code>
        </ServerScriptStep>
        <ServerScriptStep disabled="true" id="_1o+D" name="print">
          <code>print "***** $(client_nr)"</code>
        </ServerScriptStep>
        <SetGlobalStep id="_1o+E" varname="client_nr">
          <default>$(cn)</default>
        </SetGlobalStep>
        <ServerScriptStep disabled="true" id="_1o+F" name="print">
          <code>print "***** gpt_client_name = $(gpt_client_name)"</code>
        </ServerScriptStep>
      </Procedure>
      <Procedure id="_1oHB" name="gpt_calling">
        <IfSequence id="_5JR" test="${qftest:windows}">
          <SetGlobalStep id="_1oHC" varname="gpt_calling">
            <default>gpt</default>
          </SetGlobalStep>
          <ElseSequence id="_5JZ">
            <SetGlobalStep id="_1oHD" varname="gpt_calling">
              <default>gpt.sh</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
      </Procedure>
      <Procedure id="_1qSN" name="pconvert_calling">
        <IfSequence id="_1qSO" test="${qftest:windows}">
          <SetGlobalStep id="_1qSP" varname="pconvert_calling">
            <default>pconvert</default>
          </SetGlobalStep>
          <ElseSequence id="_1qSQ">
            <SetGlobalStep id="_1qSS" varname="pconvert_calling">
              <default>pconvert</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
      </Procedure>
      <Procedure id="_1p04"
                 name="waiting_for_processierung_else_terminate_process">
        <variable name="client_name"/>
        <TryStep id="_6d5" name="waiting_for_processierung">
          <ProcessWaiter client="$(client_name)" errorlevel="0" id="_1p09"
                         raise="false" timeout="60000"/>
          <CatchSequence exception="ClientNotTerminatedException" id="_6dH"
                         maxerror="0" name="client not stopped -&gt; stop it">
            <ClientStopper client="$(client_name)" id="_6d2"/>
            <ProcessWaiter client="$(client_name)" id="_6d3" raise="false"
                           timeout="10000"/>
          </CatchSequence>
          <CatchSequence exception="NoSuchClientException" id="_6d6"
                         maxerror="0"
                         name="client doesn't exist -&gt; ignore"/>
        </TryStep>
      </Procedure>
    </Package>
  </PackageRoot>
  <ExtraSequence id="_4">
    <ServerScriptStep id="_AUb" name="replace_whitespaces">
      <code>import string

pn = "$(productName)"
pn = pn.replace(".", "_")
rc.setGlobal("productName2", pn.replace(" ", "_"))      </code>
    </ServerScriptStep>
    <ServerScriptStep id="_9pM" name="substring">
      <code>import string 
pn = "emnj_jgj.nat"
index = string.find(pn, ".nat")
rc.setGlobal("pnv", pn[:index])   
              </code>
      <comment>(pr_name_in_grabber)
pnv =   
rc.setGlobal("pnv", 0)   
pnv = pn[:index]
print pnv  </comment>
    </ServerScriptStep>
    <ServerScriptStep id="_9pN" name="substring">
      <code>import string 
pn = "AVHR_x1x_1B_M02_20070902034303Z_20070902052503Z_N_O_20070902052546Z.nat'"
index = string.find(pn, ".nat")
rc.setGlobal("pn_end", pn[index:])   
            </code>
      <comment>(pr_name_in_grabber)
pnv =   
rc.setGlobal("pnv", 0)   
pnv = pn[:index]
print pnv  </comment>
    </ServerScriptStep>
    <IfSequence id="_1p0L" test="${qftest:windows}">
      <ElseSequence id="_1p0N"/>
    </IfSequence>
  </ExtraSequence>
  <WindowList id="_5"/>
</RootStep>
