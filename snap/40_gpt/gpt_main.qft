<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE RootStep>
<RootStep id="_0" name="root" version="4.1.1">
  <include>qfs.qft</include>
  <include>../lib/snap_components.qft</include>
  <include>../lib/snap_main.qft</include>
  <include>../../shared/shared_lib.qft</include>
  <include>../../shared/variables.qft</include>
  <dependency>040_aatsr_sst.qft</dependency>
  <dependency>040_bandMath.qft</dependency>
  <dependency>040_binning.qft</dependency>
  <dependency>040_brr.qft</dependency>
  <dependency>040_cluster_analysis.qft</dependency>
  <dependency>040_cloud_probability.qft</dependency>
  <dependency>040_collocation.qft</dependency>
  <dependency>040_flhmci.qft</dependency>
  <dependency>040_fu.qft</dependency>
  <dependency>040_flip.qft</dependency>
  <dependency>040_idepix.qft</dependency>
  <dependency>040_land_water_mask.qft</dependency>
  <dependency>040_merge.qft</dependency>
  <dependency>040_meris_correctRadiometry.qft</dependency>
  <dependency>040_mosaic.qft</dependency>
  <dependency>040_ndvi.qft</dependency>
  <dependency>040_pca.qft</dependency>
  <dependency>040_pduStitching.qft</dependency>
  <dependency>040_percentile.qft</dependency>
  <dependency>040_pixEx.qft</dependency>
  <dependency>040_reprojection.qft</dependency>
  <dependency>040_resampling.qft</dependency>
  <dependency>040_smac.qft</dependency>
  <dependency>040_specrtal_unmix.qft</dependency>
  <dependency>040_statistics.qft</dependency>
  <dependency>040_subset.qft</dependency>
  <dependency>041_pconvert.qft</dependency>
  <PackageRoot id="_3">
    <Dependency id="_1q5E" name="start_application_for_gpt">
      <variable name="output_dir"/>
      <SetupSequence id="_1q5F" name="start">
        <TryStep id="_1q5G" name="already started?">
          <ProcedureCall id="_1q5H" procedure="set.variable.client_snap"/>
          <ClientWaiter client="$(client)" id="_1q5I" timeout="0"/>
          <CatchSequence exception="ClientNotConnectedException" id="_1q5J"
                         maxerror="0" name="not start -&gt; start">
            <ProcedureCall id="_1q5K" procedure="start.snap.application"/>
            <ProcedureCall id="_1q5L" procedure="cleanup.output_data_folder">
              <variable name="directory">$(output_dir)</variable>
            </ProcedureCall>
          </CatchSequence>
        </TryStep>
        <TryStep id="_1qZM" name="check_SNAP_is_ready_for_test">
          <ProcedureCall id="_1qZL" procedure="check.product.not_opened"/>
          <CatchSequence exception="TestException" id="_1qZN" maxerror="0">
            <TryStep id="_1qZO" name="check_SNAP_is_ready_for_test"
                     predelay="6000">
              <ProcedureCall id="_1qZP" procedure="check.product.not_opened"/>
              <CatchSequence exception="TestException" id="_1qZQ"
                             maxerror="0"/>
            </TryStep>
          </CatchSequence>
        </TryStep>
      </SetupSequence>
      <CleanupSequence id="_1q5N" name="exit">
        <ProcedureCall id="_1q5O" procedure="stop.exit_snap"/>
      </CleanupSequence>
    </Dependency>
    <Procedure id="_1qLK" name="test_sequence_statistics">
      <SetGlobalStep id="_1qLL" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qLM" procedure="close.all_products"/>
      <TestStep id="_EG4" name="determine_time_delay">
        <IfSequence id="_EG0"
                    test="&#34;$(xml_file)&#34;==&#34;geotiff_polygon&#34; or &#34;$(xml_file)&#34;==&#34;smos_polygon&#34;">
          <comment>
</comment>
          <SetGlobalStep disabled="true" id="_EG1" varname="t">
            <default>600000</default>
          </SetGlobalStep>
          <SetGlobalStep id="_EGN" varname="t">
            <default>60000</default>
          </SetGlobalStep>
          <ElseifSequence id="_EG5"
                          test="&#34;$(xml_file)&#34;==&#34;landsat_polygon&#34;">
            <SetGlobalStep disabled="true" id="_EG6" varname="t">
              <default>3000000</default>
            </SetGlobalStep>
            <SetGlobalStep id="_EGO" varname="t">
              <default>300000</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseifSequence id="_EG7"
                          test="&#34;$(xml_file)&#34;==&#34;landsat_australia_polygon&#34; or &#34;$(xml_file)&#34;==&#34;spot_vgt_polygon&#34;">
            <SetGlobalStep disabled="true" id="_EG8" varname="t">
              <default>600000</default>
            </SetGlobalStep>
            <SetGlobalStep id="_EGP" varname="t">
              <default>60000</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_EG2">
            <SetGlobalStep disabled="true" id="_EG3" varname="t">
              <default>60000</default>
            </SetGlobalStep>
            <SetGlobalStep id="_EGQ" varname="t">
              <default>6000</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
      </TestStep>
      <ProcedureCall id="_1qNM" postdelay="6000"
                     procedure="gpt.run_operator_no_output_product">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
      <TestStep id="_1p46" name="check_output">
        <ProcedureCall id="_1qPd"
                       procedure="preparation.statistics_output_file_names"/>
        <IfSequence id="_1p4L"
                    test="&#34;$(doOutputAsciiFile)&#34;==&#34;true&#34;">
          <ProcedureCall id="_1qNQ"
                         procedure="check_external_file.file_exists_setGlobal">
            <variable name="fileName">$(ascii)</variable>
          </ProcedureCall>
          <IfSequence id="_1qNR"
                      test="&#34;$(fileExists)&#34;==&#34;True&#34;">
            <ProcedureCall id="_1p4b"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(ascii)</variable>
              <variable name="text">average</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qNN"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(ascii)</variable>
              <variable name="text">maximum</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qNO"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(ascii)</variable>
              <variable name="text">median</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qNP"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(ascii)</variable>
              <variable name="text">minimum</variable>
            </ProcedureCall>
          </IfSequence>
        </IfSequence>
        <IfSequence id="_1p4M"
                    test="&#34;$(doOutputShapefile)&#34;==&#34;true&#34;">
          <ProcedureCall id="_1p4N"
                         procedure="check_external_file.file_exists_setGlobal">
            <variable name="fileName">$(shp_file)</variable>
          </ProcedureCall>
          <IfSequence id="_1qNx"
                      test="&#34;$(fileExists)&#34;==&#34;False&#34;">
            <ProcedureCall id="_1qO8" procedure="run-log.logError">
              <variable name="message">$(shp_file) is not processed</variable>
              <variable name="withScreenshots">false</variable>
            </ProcedureCall>
          </IfSequence>
          <IfSequence id="_1qNd"
                      test="&#34;$(fileExists)&#34;==&#34;True&#34;">
            <IfSequence id="_1qNe"
                        test="&#34;$(percentiles1)&#34;==&#34;&#34;">
              <SetGlobalStep id="_1qNf" varname="per1">
                <default>90</default>
              </SetGlobalStep>
              <ElseSequence id="_1qNg">
                <SetGlobalStep id="_1qNh" varname="per1">
                  <default>$(percentiles1)</default>
                </SetGlobalStep>
              </ElseSequence>
            </IfSequence>
            <ProcedureCall id="_1qNv"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(mapping_file)</variable>
              <variable name="text">p$(per1)</variable>
            </ProcedureCall>
            <IfSequence id="_1qNj"
                        test="&#34;$(percentiles2)&#34;==&#34;&#34;">
              <SetGlobalStep id="_1qNk" varname="per2">
                <default>95</default>
              </SetGlobalStep>
              <ElseSequence id="_1qNl">
                <SetGlobalStep id="_1qNm" varname="per2">
                  <default>$(percentiles2)</default>
                </SetGlobalStep>
              </ElseSequence>
            </IfSequence>
            <ProcedureCall id="_1qNw"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(mapping_file)</variable>
              <variable name="text">p$(per2)</variable>
            </ProcedureCall>
            <ElseSequence id="_1qO6">
              <ProcedureCall id="_1qO7" procedure="run-log.logError">
                <variable name="message">$(mapping_file) is not processed</variable>
                <variable name="withScreenshots">false</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
        </IfSequence>
      </TestStep>
    </Procedure>
    <Procedure id="_1qbQ" name="test_sequence_pduStitching">
      <SetGlobalStep id="_1qbR" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qbS" procedure="close.all_products"/>
      <ProcedureCall id="_1qbg" postdelay="6000"
                     procedure="gpt.run_operator_no_output_product">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
      <TestStep disabled="true" id="_1qcU" name="check_output_in_snap">
        <TestStep id="_1qdf" name="set_output_file_path">
          <ProcedureCall id="_1qdh" procedure="path.main_path"/>
          <IfSequence id="_1qdi" test="${qftest:windows}">
            <SetGlobalStep id="_1qdj" varname="outfile">
              <default>${path:data_directory}out\\$(output_folder)\\$(output_file)\\</default>
            </SetGlobalStep>
            <ElseifSequence id="_1qdk" name="MAC?"
                            test="'${system:os.name}' .find('Mac OS X')&gt;=0">
              <SetGlobalStep id="_1qdl" varname="outfile">
                <default>${path:data_directory}out/$(data_out_dir)/$(output_file)/</default>
              </SetGlobalStep>
            </ElseifSequence>
            <ElseSequence id="_1qdm">
              <SetGlobalStep id="_1qdn" varname="outfile">
                <default>${path:data_directory}out/$(data_out_dir)/$(output_file)/</default>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
        </TestStep>
        <ProcedureCall id="_1qdq"
                       procedure="check_external_file.file_exists_setGlobal">
          <variable name="fileName">$(outfile)xfdumanifest.xml</variable>
        </ProcedureCall>
        <IfSequence id="_1qdB" test="&#34;$(fileExists)&#34;==&#34;True&#34;">
          <ProcedureCall id="_1qdC" procedure="check.product.not_opened"/>
          <IfSequence id="_1qdD"
                      test="&#34;$(not_opened)&#34;==&#34;false&#34;">
            <ProcedureCall id="_1qdE" procedure="close.all_products"/>
            <ElseSequence id="_1qdF">
              <ProcedureCall id="_1qdG" procedure="open.product_in_snap">
                <variable name="prod_dir">$(outfile)</variable>
                <variable name="in_out">out</variable>
                <variable name="prod">xfdumanifest.xml</variable>
                <variable name="product_type"/>
              </ProcedureCall>
              <ProcedureCall id="_1qdI" procedure="check.product.not_opened"/>
              <IfSequence id="_1qdJ"
                          test="&#34;$(not_opened)&#34;==&#34;true&#34;">
                <ProcedureCall id="_1qdK" procedure="wait.product_is_opened"/>
              </IfSequence>
              <ProcedureCall id="_1qdL" procedure="check.product.not_opened"/>
              <IfSequence id="_1qdM"
                          test="&#34;$(not_opened)&#34;==&#34;false&#34;">
                <ProcedureCall id="_1qdN"
                               procedure="error_handling.if_SNAP_SNAP_Error_shoot_error_message">
                  <variable name="screenshot">error_while_import</variable>
                </ProcedureCall>
                <ProcedureCall id="_1qdT"
                               procedure="test_events.imaging_tools.open_image_window_in_target_product_check_masks_layers"/>
                <ProcedureCall id="_1qdR" procedure="close.all_products"/>
                <ElseSequence id="_1qdU">
                  <ProcedureCall id="_1qdV" procedure="run-log.logError">
                    <variable name="message">Target product is not opened in SNAP</variable>
                    <variable name="withScreenshots">true</variable>
                  </ProcedureCall>
                </ElseSequence>
              </IfSequence>
              <ProcedureCall id="_1qdW"
                             procedure="error_handling.if_SNAP_SNAP_Error_shoot_error_message">
                <variable name="screenshot">error_while_import</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
          <ElseSequence id="_1qdr">
            <ProcedureCall id="_1qXM" procedure="run-log.logError">
              <variable name="message">$(outfile)xfdumanifest.xml is not processed</variable>
              <variable name="withScreenshots">false</variable>
            </ProcedureCall>
          </ElseSequence>
        </IfSequence>
      </TestStep>
    </Procedure>
    <Procedure id="_1qO9" name="test_sequence_pixEx">
      <SetGlobalStep id="_1qOA" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qiu"
                     procedure="qfs.swing.cleanup.closeAllModalDialogs">
        <variable name="maxDialogs">5</variable>
      </ProcedureCall>
      <ProcedureCall id="_1qOB" procedure="close.all_products"/>
      <TestStep id="_1qP0" name="determine_time_delay">
        <IfSequence id="_1qP1"
                    test="&#34;$(xml_file)&#34;==&#34;pixEx_aatsr&#34; or &#34;$(xml_file)&#34;==&#34;pixEx_geotiff&#34; or &#34;$(xml_file)&#34;==&#34;pixEx_landsat&#34; or &#34;$(xml_file)&#34;==&#34;pixEx_vgt&#34; or &#34;$(xml_file)&#34;==&#34;pixEx_dimap&#34; or &#34;$(xml_file)&#34;==&#34;pixEx_smos&#34; or &#34;$(xml_file)&#34;==&#34;pixEx_netCDF&#34;">
          <comment>



</comment>
          <SetGlobalStep id="_1qP2" varname="t">
            <default>6000000</default>
          </SetGlobalStep>
          <ElseifSequence id="_1qP3"
                          test="&#34;$(xml_file)&#34;==&#34;jira_BEAM_1471_DAY_OF_YEAR_1&#34; or &#34;$(xml_file)&#34;==&#34;jira_BEAM_1471_DAY_OF_YEAR_2&#34;">
            <SetGlobalStep id="_1qP4" varname="t">
              <default>3000</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_1qP5">
            <SetGlobalStep id="_1qP6" varname="t">
              <default>300000</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
      </TestStep>
      <ProcedureCall id="_1qOP" postdelay="2000"
                     procedure="gpt.run_operator_no_output_product">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
      <TestStep id="_1qOQ" name="check_output" predelay="2000">
        <ProcedureCall id="_1qPe"
                       procedure="preparation.pixEx_output_file_names"/>
        <TestStep id="_1kGr" name="check_productId_map_file">
          <ProcedureCall id="_1qPK"
                         procedure="check_external_file.file_exists_setGlobal">
            <variable name="fileName">$(map_file)</variable>
          </ProcedureCall>
          <IfSequence id="_1qPL"
                      test="&#34;$(fileExists)&#34;==&#34;True&#34;">
            <ProcedureCall id="_1qPM"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(map_file)</variable>
              <variable name="text">$(prod_1)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qQ4"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(map_file)</variable>
              <variable name="text">$(prod_2)</variable>
            </ProcedureCall>
            <ProcedureCall id="_1qQ5"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(map_file)</variable>
              <variable name="text">$(prod_3)</variable>
            </ProcedureCall>
            <ElseSequence id="_1qPQ">
              <ProcedureCall id="_1qPR" procedure="run-log.logError">
                <variable name="message">$(map_file) is not processed</variable>
                <variable name="withScreenshots">false</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
        </TestStep>
        <TestStep id="_1kGk" name="check_measurement_files">
          <IfSequence id="_1qQD" test="&#34;$(prod_1)&#34;&lt;&gt;&#34;&#34;">
            <ProcedureCall id="_1qab" procedure="check_measurements_file">
              <variable name="measurements_file">$(measurements_1)</variable>
            </ProcedureCall>
          </IfSequence>
          <IfSequence id="_1kHA" test="&#34;$(prod_2)&#34;&lt;&gt;&#34;&#34;">
            <ProcedureCall id="_1qac" procedure="check_measurements_file">
              <variable name="measurements_file">$(measurements_2)</variable>
            </ProcedureCall>
          </IfSequence>
          <IfSequence id="_1qQc" test="&#34;$(prod_3)&#34;&lt;&gt;&#34;&#34;">
            <ProcedureCall id="_1qQd" procedure="check_measurements_file">
              <variable name="measurements_file">$(measurements_3)</variable>
            </ProcedureCall>
          </IfSequence>
        </TestStep>
        <TestStep id="_1kGR" name="check_kmz_file">
          <IfSequence id="_1qQl" test="&#34;$(kmz)&#34;==&#34;true&#34;">
            <ProcedureCall id="_1qQe"
                           procedure="check_external_file.file_exists_setGlobal">
              <variable name="fileName">$(kmz_file)</variable>
            </ProcedureCall>
            <IfSequence id="_1qQf"
                        test="&#34;$(fileExists)&#34;==&#34;False&#34;">
              <ProcedureCall id="_1qQk" procedure="run-log.logError">
                <variable name="message">$(kmz_file) is not processed</variable>
                <variable name="withScreenshots">false</variable>
              </ProcedureCall>
            </IfSequence>
          </IfSequence>
        </TestStep>
        <IfSequence id="_1qaa" test="&#34;$(prod_1)&#34;&lt;&gt;&#34;&#34;"/>
        <TestStep id="_1qR7" name="check_scatter_plot_file">
          <IfSequence id="_1qR8"
                      test="&#34;$(scatter_plot)&#34;==&#34;true&#34;">
            <ServerScriptStep id="_1qRd" name="check_fileExists_setGlobal">
              <code>from java.io import File
import glob
sp = glob.glob('$(scatte_plot_file)')
rc.setGlobal("files_number", len(sp))</code>
            </ServerScriptStep>
            <IfSequence id="_1qRg" test="$(files_number)==0">
              <ProcedureCall id="_1qRh" procedure="run-log.logError">
                <variable name="message">$(scatte_plot_file) is not processed</variable>
                <variable name="withScreenshots">false</variable>
              </ProcedureCall>
            </IfSequence>
          </IfSequence>
        </TestStep>
        <TestStep id="_1kGU" name="check_subScenes_dir">
          <IfSequence id="_Brf" test="&#34;$(subset)&#34;==&#34;true&#34;">
            <ProcedureCall id="_1qQq"
                           procedure="check_external_file.file_exists_setGlobal">
              <variable name="fileName">$(subScenes_dir)</variable>
            </ProcedureCall>
            <IfSequence id="_1qQr"
                        test="&#34;$(fileExists)&#34;==&#34;True&#34;">
              <ProcedureCall id="_1qQu"
                             procedure="open.product_in_snap_file_of_type_all">
                <variable name="prod_dir">$(subScenes_dir)</variable>
              </ProcedureCall>
              <ProcedureCall id="_1l3B" procedure="check.product.not_opened"/>
              <IfSequence id="_1kk7"
                          test="&#34;$(not_opened)&#34;==&#34;true&#34;">
                <ProcedureCall id="_1qQw" procedure="run-log.logError">
                  <variable name="message">No file of the directory $(subScenes_dir) could be opened.</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
              </IfSequence>
              <ProcedureCall id="_1qQv" procedure="close.all_products"/>
              <ElseSequence id="_1qQt">
                <ProcedureCall id="_1qQs" procedure="run-log.logError">
                  <variable name="message">$(subScenes_dir) is not exist</variable>
                  <variable name="withScreenshots">false</variable>
                </ProcedureCall>
              </ElseSequence>
            </IfSequence>
          </IfSequence>
        </TestStep>
      </TestStep>
    </Procedure>
    <Procedure id="_1qS3" name="test_sequence_percentile">
      <SetGlobalStep id="_1qS4" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qS5" procedure="close.all_products"/>
      <ProcedureCall id="_1qSr" procedure="daten_format.output_format">
        <variable name="out_form"/>
      </ProcedureCall>
      <ProcedureCall id="_1qSD"
                     procedure="gpt.run_operator_check_output_file">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
      <TestStep id="_1qSE" name="check_output_in_snap">
        <SetGlobalStep id="_1qZJ" varname="f">
          <default>$(of)</default>
        </SetGlobalStep>
        <ProcedureCall id="_1qZK" procedure="check_target_product_in_SNAP"/>
        <IfSequence id="_1qSu"
                    test="&#34;$(timeseries_product)&#34;&lt;&gt;&#34;&#34;">
          <SetGlobalStep id="_1p2L" varname="outfn">
            <default>$(timeseries_product)</default>
          </SetGlobalStep>
          <TestStep id="_1oPZ" name="set_output_file">
            <IfSequence id="_1oPa" test="${qftest:windows}">
              <SetGlobalStep id="_1oPb" varname="outfile">
                <default>${path:data_directory}out\\$(output_folder)\\$(outfn).$(fr)</default>
              </SetGlobalStep>
              <ElseifSequence id="_1oPc" name="MAC?"
                              test="'${system:os.name}' .find('Mac OS X')&gt;=0">
                <SetGlobalStep id="_1oPd" varname="outfile">
                  <default>${path:data_directory}out/$(data_out_dir)/$(outfn).$(fr)</default>
                </SetGlobalStep>
              </ElseifSequence>
              <ElseSequence id="_1oPe">
                <SetGlobalStep id="_1oPf" varname="outfile">
                  <default>${path:data_directory}out/$(data_out_dir)/$(outfn).$(fr)</default>
                </SetGlobalStep>
              </ElseSequence>
            </IfSequence>
          </TestStep>
          <ProcedureCall id="_1oPg"
                         procedure="check_external_file.file_exists_setGlobal">
            <variable name="fileName">$(outfile)</variable>
          </ProcedureCall>
          <IfSequence id="_1oPh"
                      test="&#34;$(fileExists)&#34;==&#34;False&#34;">
            <TestStep id="_1oPi" name="wait" postdelay="5000">
              <ProcedureCall id="_1oQb"
                             procedure="utils.waiting_for_processierung_else_terminate_process">
                <variable name="client_name">$(gpt_client_name)</variable>
              </ProcedureCall>
            </TestStep>
            <ProcedureCall id="_1oPk"
                           procedure="check_external_file.file_exists_setGlobal">
              <variable name="fileName">$(outfile)</variable>
            </ProcedureCall>
            <IfSequence id="_1o-+"
                        test="&#34;$(fileExists)&#34;==&#34;False&#34;">
              <ProcedureCall id="_1p02" procedure="run-log.logError">
                <variable name="message">$(outfile) is not processed</variable>
                <variable name="withScreenshots">false</variable>
              </ProcedureCall>
            </IfSequence>
          </IfSequence>
          <ProcedureCall id="_1qSt" procedure="check_target_product_in_SNAP"/>
        </IfSequence>
      </TestStep>
    </Procedure>
    <Procedure id="_1oPq" name="test_sequence">
      <SetGlobalStep id="_1o+F" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1oPr" procedure="close.all_products"/>
      <IfSequence id="_1oPs"
                  test="&#34;$(other_formats )&#34;==&#34;true&#34;">
        <TestStep id="_1oPt" name="dimap">
          <SetGlobalStep id="_1oPu" varname="f">
            <default>dimap</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qKz" procedure="test_sequence_utility"/>
        </TestStep>
        <TestStep id="_1oPy" name="geotiff">
          <SetGlobalStep id="_1oPz" varname="f">
            <default>geotiff</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qL0" procedure="test_sequence_utility"/>
        </TestStep>
        <TestStep id="_1oQ1" name="hdf5">
          <SetGlobalStep id="_1oQ2" varname="f">
            <default>hdf5</default>
          </SetGlobalStep>
          <ProcedureCall id="_1oQ3" procedure="daten_format.output_format">
            <variable name="out_form">$(f)</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qL6"
                         procedure="gpt.run_operator_check_output_file">
            <variable name="application">$(app)</variable>
          </ProcedureCall>
        </TestStep>
        <TestStep id="_1oQ5" name="netCDF_CF">
          <SetGlobalStep id="_1oQ6" varname="f">
            <default>netCDF_CF</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qL1" procedure="test_sequence_utility"/>
        </TestStep>
        <TestStep id="_1oQA" name="netCDF4_CF">
          <SetGlobalStep id="_1oQB" varname="f">
            <default>netCDF4_CF</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qL2" procedure="test_sequence_utility"/>
        </TestStep>
        <TestStep id="_1oQF" name="netCDF_beam">
          <SetGlobalStep id="_1oQG" varname="f">
            <default>netCDF_beam</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qL3" procedure="test_sequence_utility"/>
        </TestStep>
        <TestStep id="_1oQK" name="netCDF4_beam">
          <SetGlobalStep id="_1oQL" varname="f">
            <default>netCDF4_beam</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qL4" procedure="test_sequence_utility"/>
        </TestStep>
        <ElseifSequence id="_1oQP"
                        test="&#34;$(other_formats )&#34;==&#34;N1&#34;">
          <TestStep id="_1oQQ" name="N1">
            <SetGlobalStep id="_1qUr" varname="f">
              <default>N1</default>
            </SetGlobalStep>
            <ProcedureCall id="_1qUw" procedure="test_sequence_utility_N1"/>
          </TestStep>
        </ElseifSequence>
        <ElseifSequence id="_1qil"
                        test="&#34;$(other_formats )&#34;&lt;&gt;&#34;&#34; and &#34;$(other_formats )&#34;&lt;&gt;&#34;true&#34;">
          <SetGlobalStep id="_1qis" varname="f">
            <default>$(other_formats)</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qit" procedure="test_sequence_utility"/>
        </ElseifSequence>
        <ElseSequence id="_1oQV">
          <IfSequence id="_1p0m"
                      test="&#34;$(gpf_op)&#34;==&#34;Binning&#34;">
            <SetGlobalStep id="_1p0n" varname="f">
              <default>$(other_formats)</default>
            </SetGlobalStep>
            <ProcedureCall id="_1p0q" procedure="daten_format.output_format">
              <variable name="out_form">$(f)</variable>
            </ProcedureCall>
            <ElseSequence id="_1p0o">
              <SetGlobalStep id="_1qK+" varname="f">
                <default>dimap</default>
              </SetGlobalStep>
              <ProcedureCall id="_1oQX"
                             procedure="daten_format.output_format">
                <variable name="out_form">dimap</variable>
              </ProcedureCall>
            </ElseSequence>
          </IfSequence>
          <ProcedureCall id="_1qK-" procedure="test_sequence_utility"/>
        </ElseSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1qcX" name="test_sequence_should_not_be_processed">
      <SetGlobalStep id="_1qcY" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qcZ" procedure="close.all_products"/>
      <SetGlobalStep id="_1qcc" varname="f"/>
      <ProcedureCall id="_1qd9" procedure="daten_format.output_format">
        <variable name="out_form">$(f)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1qdA"
                     procedure="gpt.run_operator_check_if_is_not_processed">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1qSv" name="test_sequence_pconvert">
      <variable name="platform"/>
      <SetGlobalStep id="_1qSw" varname="app">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qSx" procedure="close.all_products"/>
      <TryStep id="_1qag" name="create_output_folder_if_not_exsists">
        <ProcedureCall id="_1qaf" procedure="utils.create_output_folder">
          <variable name="directory">$(output_folder)</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1qah" maxerror="0"/>
      </TryStep>
      <ProcedureCall id="_1qTs" procedure="utils.set_output_pconvert_file">
        <variable name="platform">$(platform)</variable>
      </ProcedureCall>
      <TestStep id="_1qao" name="dimap">
        <SetGlobalStep id="_1qap" local="true" varname="f">
          <default>pdimap1</default>
        </SetGlobalStep>
        <ProcedureCall id="_1qaq" procedure="product_conversion_utility"/>
      </TestStep>
      <IfSequence id="_1qik"
                  test="&#34;$(platform)&#34;&lt;&gt;&#34;sentinel3&#34;">
        <TestStep id="_1qT0" name="geotiff">
          <SetGlobalStep id="_1qT1" local="true" varname="f">
            <default>pgeotiff</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qTp" procedure="product_conversion_utility"/>
        </TestStep>
        <TestStep id="_1qT3" name="hdf5">
          <SetGlobalStep id="_1qT4" local="true" varname="f">
            <default>phdf5</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qTz" procedure="image_conversion_utility"/>
        </TestStep>
      </IfSequence>
      <TestStep id="_1qT+" name="bmp">
        <SetGlobalStep id="_1qT-" local="true" varname="f">
          <default>bmp</default>
        </SetGlobalStep>
        <ProcedureCall id="_1qU0" procedure="image_conversion_utility"/>
      </TestStep>
      <TestStep id="_1qU1" name="png">
        <SetGlobalStep id="_1qU2" local="true" varname="f">
          <default>png</default>
        </SetGlobalStep>
        <ProcedureCall id="_1qU3" procedure="image_conversion_utility"/>
      </TestStep>
      <TestStep id="_1qU4" name="jpg">
        <SetGlobalStep id="_1qU5" local="true" varname="f">
          <default>jpg</default>
        </SetGlobalStep>
        <ProcedureCall id="_1qU6" procedure="image_conversion_utility"/>
      </TestStep>
      <TestStep disabled="true" id="_1qU7" name="tif">
        <SetGlobalStep id="_1qU8" local="true" varname="f">
          <default>tif</default>
        </SetGlobalStep>
        <ProcedureCall id="_1qU9" procedure="image_conversion_utility"/>
      </TestStep>
    </Procedure>
    <Procedure id="_1qds" name="test_sequence_fu_different_source">
      <SetGlobalStep id="_1qhi" varname="application">
        <default>snap</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qdu" procedure="close.all_products"/>
      <TryStep id="_1qdv" name="create_output_folder_if_not_exsists">
        <ProcedureCall id="_1qdw" procedure="utils.create_output_folder">
          <variable name="directory">$(output_folder)</variable>
        </ProcedureCall>
        <CatchSequence exception="TestException" id="_1qdx" maxerror="0"/>
      </TryStep>
      <TestStep id="_1qeJ" name="set_output_file_path">
        <IfSequence id="_1qUR" test="${qftest:windows}">
          <SetGlobalStep id="_1qUS" varname="output_fu_file">
            <default>${path:data_directory}out\\$(output_folder)\\</default>
          </SetGlobalStep>
          <ElseifSequence id="_1qUT" name="MAC?"
                          test="'${system:os.name}' .find('Mac OS X')&gt;=0">
            <SetGlobalStep id="_1qUU" varname="output_fu_file">
              <default>${path:data_directory}out/$(data_out_dir)/$(output_file)</default>
            </SetGlobalStep>
          </ElseifSequence>
          <ElseSequence id="_1qUV">
            <SetGlobalStep id="_1qeK" varname="output_fu_file">
              <default>${path:data_directory}out/$(data_out_dir)/$(output_file)</default>
            </SetGlobalStep>
          </ElseSequence>
        </IfSequence>
      </TestStep>
      <IfSequence id="_1qeL"
                  test="&#34;$(other_formats )&#34;==&#34;true&#34;">
        <TestStep id="_1qeM" name="dimap">
          <SetGlobalStep id="_1qeN" varname="f">
            <default>dimap</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qhk" varname="outfn">
            <default>$(output_file)_dimap</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qha" procedure="fu_different_source_utility"/>
        </TestStep>
        <TestStep id="_1qeP" name="geotiff">
          <SetGlobalStep id="_1qeQ" varname="f">
            <default>geotiff</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qiS" varname="outfn">
            <default>$(output_file)_geotiff</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qhc" procedure="fu_different_source_utility"/>
        </TestStep>
        <TestStep id="_1qeS" name="hdf5">
          <SetGlobalStep id="_1qeT" varname="f">
            <default>hdf5</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qiT" varname="outfn">
            <default>$(output_file)_hdf5</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qhd" procedure="fu_different_source_utility"/>
        </TestStep>
        <TestStep id="_1qeW" name="netCDF_CF">
          <SetGlobalStep id="_1qeX" varname="f">
            <default>netCDF_CF</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qiU" varname="outfn">
            <default>$(output_file)_netcdf_cf</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qhe" procedure="fu_different_source_utility"/>
        </TestStep>
        <TestStep id="_1qeZ" name="netCDF4_CF">
          <SetGlobalStep id="_1qea" varname="f">
            <default>netCDF4_CF</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qiW" varname="outfn">
            <default>$(output_file)_netcdf4_cf</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qhf" procedure="fu_different_source_utility"/>
        </TestStep>
        <TestStep id="_1qec" name="netCDF_beam">
          <SetGlobalStep id="_1qed" varname="f">
            <default>netCDF_beam</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qiX" varname="outfn">
            <default>$(output_file)_netcdf_beam</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qhg" procedure="fu_different_source_utility"/>
        </TestStep>
        <TestStep id="_1qef" name="netCDF4_beam">
          <SetGlobalStep id="_1qeg" varname="f">
            <default>netCDF4_beam</default>
          </SetGlobalStep>
          <SetGlobalStep id="_1qiY" varname="outfn">
            <default>$(output_file)_netcdf4_beam</default>
          </SetGlobalStep>
          <ProcedureCall id="_1qhh" procedure="fu_different_source_utility"/>
        </TestStep>
        <ElseSequence id="_1qeo">
          <TestStep id="_1qfE" name="dimap">
            <SetGlobalStep id="_1qfF" varname="f">
              <default>dimap</default>
            </SetGlobalStep>
            <SetGlobalStep id="_1qiZ" varname="outfn">
              <default>$(output_file)</default>
            </SetGlobalStep>
            <ProcedureCall id="_1qhb"
                           procedure="fu_different_source_utility"/>
          </TestStep>
        </ElseSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1pbm" name="check_target_product_in_SNAP">
      <comment>@teststep Check target product.</comment>
      <IfSequence id="_1p0t" test="&#34;$(fileExists)&#34;==&#34;True&#34;">
        <ProcedureCall id="_1qKX" procedure="check.product.not_opened"/>
        <IfSequence id="_1qKY"
                    test="&#34;$(not_opened)&#34;==&#34;false&#34;">
          <ProcedureCall id="_1qKh" procedure="close.all_products"/>
          <ElseSequence id="_1qKf">
            <ProcedureCall id="_1qKp" procedure="open.product_in_snap">
              <variable name="prod_dir">$(output_folder)</variable>
              <variable name="in_out">out</variable>
              <variable name="prod">$(outfn).$(fr)</variable>
              <variable name="product_type">dimap</variable>
            </ProcedureCall>
            <ProcedureCall id="_1po3" procedure="check.product.not_opened"/>
            <IfSequence id="_1po4"
                        test="&#34;$(not_opened)&#34;==&#34;true&#34;">
              <ProcedureCall id="_1po6" procedure="wait.product_is_opened"/>
            </IfSequence>
            <ProcedureCall id="_1oap" procedure="check.product.not_opened"/>
            <IfSequence id="_1oaq"
                        test="&#34;$(not_opened)&#34;==&#34;false&#34;">
              <ProcedureCall id="_1qVC"
                             procedure="error_handling.if_SNAP_SNAP_Error_shoot_error_message">
                <variable name="screenshot">error_while_import</variable>
              </ProcedureCall>
              <IfSequence id="_1qZG"
                          test="&#34;$(f)&#34;==&#34;netCDF_CF&#34; or &#34;$(f)&#34;==&#34;netCDF4_CF&#34;">
                <SetGlobalStep id="_1q65" varname="group_id1"/>
                <ProcedureCall id="_1l39"
                               procedure="utility.open_image_view_check_it">
                  <comment>@teststep Open image view and check it.</comment>
                </ProcedureCall>
                <ProcedureCall id="_1l33" procedure="close.all_products"/>
                <ElseSequence id="_1qZH">
                  <ProcedureCall id="_1lEu"
                                 procedure="test_events.imaging_tools.open_image_window_in_target_product_check_masks_layers"/>
                </ElseSequence>
              </IfSequence>
              <ElseSequence id="_1qKs">
                <ProcedureCall id="_1oao" procedure="run-log.logError">
                  <variable name="message">Target product is not opened in SNAP</variable>
                  <variable name="withScreenshots">true</variable>
                </ProcedureCall>
              </ElseSequence>
            </IfSequence>
            <ProcedureCall id="_1qVD"
                           procedure="error_handling.if_SNAP_SNAP_Error_shoot_error_message">
              <variable name="screenshot">error_while_import</variable>
            </ProcedureCall>
          </ElseSequence>
        </IfSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1qQM" name="check_measurements_file">
      <variable name="measurements_file"/>
      <comment>@teststep Check $(measurements_file) file</comment>
      <ServerScriptStep id="_1kxf" name="print">
        <code>print "measurements_file = $(measurements_file)" </code>
        <comment>"$(measurements_file)"</comment>
      </ServerScriptStep>
      <IfSequence id="_1qQN"
                  test="&#34;$(measurements_file)&#34;&lt;&gt;&#34;&#34;">
        <ProcedureCall id="_1qQO"
                       procedure="check_external_file.file_exists_setGlobal">
          <variable name="fileName">$(measurements_file)</variable>
        </ProcedureCall>
        <IfSequence id="_1qQP" test="&#34;$(fileExists)&#34;==&#34;True&#34;">
          <ProcedureCall id="_1qQQ"
                         procedure="check_external_file.check_text_in_external_file">
            <variable name="file">$(measurements_file)</variable>
            <variable name="text">SNAP pixel extraction export table</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qQR"
                         procedure="check_external_file.check_text_in_external_file">
            <variable name="file">$(measurements_file)</variable>
            <variable name="text">ProdID</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qQS"
                         procedure="check_external_file.check_text_in_external_file">
            <variable name="file">$(measurements_file)</variable>
            <variable name="text">Name</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qQT"
                         procedure="check_external_file.check_text_in_external_file">
            <variable name="file">$(measurements_file)</variable>
            <variable name="text">Latitude</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qQU"
                         procedure="check_external_file.check_text_in_external_file">
            <variable name="file">$(measurements_file)</variable>
            <variable name="text">Longitude</variable>
          </ProcedureCall>
          <ProcedureCall id="_1qQV"
                         procedure="check_external_file.check_text_in_external_file">
            <variable name="file">$(measurements_file)</variable>
            <variable name="text">$(measurements)</variable>
          </ProcedureCall>
          <IfSequence id="_1qQW"
                      test="&#34;$(expression)&#34;&lt;&gt;&#34;&#34;">
            <ProcedureCall id="_1qQX"
                           procedure="check_external_file.check_text_in_external_file">
              <variable name="file">$(measurements_file)</variable>
              <variable name="text">$(expression)</variable>
            </ProcedureCall>
          </IfSequence>
          <ElseSequence id="_1qQY">
            <ProcedureCall id="_1qQZ" procedure="run-log.logError">
              <variable name="message">$(measurements_file) is not processed</variable>
              <variable name="withScreenshots">false</variable>
            </ProcedureCall>
          </ElseSequence>
        </IfSequence>
      </IfSequence>
    </Procedure>
    <Procedure id="_1qV7" name="test_sequence_utility_N1">
      <ProcedureCall id="_1qV8" procedure="daten_format.output_format">
        <variable name="out_form">$(f)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1qVA" procedure="gpt.run_meris_N1_patcher">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1qVB" procedure="check_target_product_in_SNAP"/>
    </Procedure>
    <Procedure id="_1qKv" name="test_sequence_utility">
      <ProcedureCall id="_1qKw" procedure="daten_format.output_format">
        <variable name="out_form">$(f)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1qKx"
                     procedure="gpt.run_operator_check_output_file">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
      <ProcedureCall id="_1qKy" procedure="check_target_product_in_SNAP"/>
    </Procedure>
    <Procedure id="_1qTk" name="product_conversion_utility">
      <ProcedureCall id="_1qTy" procedure="image_conversion_utility"/>
      <ProcedureCall id="_1qTn" procedure="check_target_product_in_SNAP"/>
    </Procedure>
    <Procedure id="_1qTu" name="image_conversion_utility">
      <ProcedureCall id="_1qTv" procedure="daten_format.output_format">
        <variable name="out_form">$(f)</variable>
      </ProcedureCall>
      <SetGlobalStep id="_1qUW" varname="outfile">
        <default>$(output_pconvert_file).$(fr)</default>
      </SetGlobalStep>
      <ProcedureCall id="_1qTw"
                     procedure="gpt.run_pconvert_check_output_file">
        <variable name="application">$(app)</variable>
      </ProcedureCall>
    </Procedure>
    <Procedure id="_1qfc" name="fu_different_source_utility">
      <ProcedureCall id="_1qhE" procedure="daten_format.output_format">
        <variable name="out_form">$(f)</variable>
      </ProcedureCall>
      <IfSequence id="_1qhF" postdelay="2000"
                  test="&#34;$(supported_format)&#34;==&#34;true&#34;">
        <ProcedureCall id="_1qhG"
                       procedure="utils.set_processing_parameters_no_output_product"/>
        <TestStep id="_1qhH" name="compose_command_line ">
          <ProcedureCall id="_1qij" procedure="variables.operators"/>
          <SetGlobalStep id="_1qhj" local="true" varname="operator">
            <default>$(fu)</default>
          </SetGlobalStep>
          <IfSequence id="_1qhK"
                      test="&#34;$(instrument_name)&#34;&lt;&gt;&#34;&#34;">
            <ProcedureCall id="_1qhl" procedure="variables.fu_instruments"/>
            <SetGlobalStep id="_1qiH" local="true"
                           varname="instrument_option">
              <default>-Pinstrument=$($(instrument_name))</default>
              <comment>  -Pinstrument=&lt;instrument&gt;                   The instrument to compute FU for.
                                              Default value is 'AUTO_DETECT'.
  -PvalidExpression=&lt;string&gt;                  An expression to filter which pixel are considered.
</comment>
            </SetGlobalStep>
            <ElseSequence id="_1qhM">
              <SetGlobalStep id="_1qhN" local="true"
                             varname="instrument_option">
                <comment>  -Pinstrument=&lt;instrument&gt;                   The instrument to compute FU for.
                                              Default value is 'AUTO_DETECT'.
  -PvalidExpression=&lt;string&gt;                  An expression to filter which pixel are considered.
</comment>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
          <IfSequence id="_1qhO"
                      test="&#34;$(mask_expr)&#34;&lt;&gt;&#34;&#34;">
            <SetGlobalStep id="_1qhP" local="true"
                           varname="valid_expression_option">
              <default>-PvalidExpression="$(mask_expr)"</default>
              <comment>  -Pinstrument=&lt;instrument&gt;                   The instrument to compute FU for.
                                              Default value is 'AUTO_DETECT'.
  -PvalidExpression=&lt;string&gt;                  An expression to filter which pixel are considered.
</comment>
            </SetGlobalStep>
            <ElseSequence id="_1qhQ">
              <SetGlobalStep id="_1qhR" local="true"
                             varname="valid_expression_option">
                <comment>  -Pinstrument=&lt;instrument&gt;                   The instrument to compute FU for.
                                              Default value is 'AUTO_DETECT'.
  -PvalidExpression=&lt;string&gt;                  An expression to filter which pixel are considered.
</comment>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
          <IfSequence id="_1qid" test="${qftest:windows}">
            <SetGlobalStep id="_1qig" varname="gpt_commando">
              <default>$(gpt_calling) $(operator)  $(instrument_option) $(valid_expression_option) $(of) -t $(output_fu_file)$(outfn).$(fr) $(input) -e</default>
            </SetGlobalStep>
            <ElseifSequence id="_1qie" name="MAC?"
                            test="'${system:os.name}' .find('Mac OS X')&gt;=0">
              <SetGlobalStep id="_1qih" varname="gpt_commando">
                <default>$(gpt_calling) $(operator)  $(instrument_option) $(valid_expression_option) $(of) -t $(output_fu_file)$(outfn).$(fr) $(input)</default>
              </SetGlobalStep>
            </ElseifSequence>
            <ElseSequence id="_1qif">
              <SetGlobalStep id="_1qii" varname="gpt_commando">
                <default>$(gpt_calling) $(operator)  $(instrument_option) $(valid_expression_option) $(of) -t $(output_fu_file)$(outfn).$(fr) $(input)</default>
              </SetGlobalStep>
            </ElseSequence>
          </IfSequence>
        </TestStep>
        <ProcedureCall id="_1qht" procedure="utils.run_operator"/>
        <ProcedureCall id="_1qhV" postdelay="2000" predelay="2000"
                       procedure="utils.waiting_for_processierung_else_terminate_process">
          <variable name="client_name">$(gpt_client_name)</variable>
        </ProcedureCall>
        <ProcedureCall id="_1qhX"
                       procedure="utils.check_output_file_was_written_else_shoot_error"/>
      </IfSequence>
      <IfSequence id="_1qiR" test="&#34;$(f)&#34;&lt;&gt;&#34;hdf5&#34;">
        <ProcedureCall id="_1qhZ" procedure="check_target_product_in_SNAP"/>
      </IfSequence>
    </Procedure>
  </PackageRoot>
  <ExtraSequence id="_4"/>
  <WindowList id="_5"/>
</RootStep>
